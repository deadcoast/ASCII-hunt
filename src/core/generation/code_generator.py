"""Code Generator Module."""

from src.components.component_model_representation import ComponentModel


class CodeGenerator:
    def __init__(self):
        """Initialize a CodeGenerator.

        The CodeGenerator has the following properties:
        - self.template_registry: a dictionary mapping component types to
          template functions for generating code
        - self.helper_functions: a dictionary mapping function names to
          template helper functions
        - self.imports: a set of strings representing the set of import
          statements required by the generated code
        - self.component_model: a ComponentModel instance
        """
        self.template_registry = {}
        self.helper_functions = {}
        self.imports = set()
        self.component_model = ComponentModel()
        self.register_python_templates()
        self.register_python_helpers()
        self.register_python_imports()
        self.register_python_components()

    def register_python_templates(self):
        """Register Python-specific templates."""
        self.register_template("Window", self.window_template)
        self.register_template("Button", self.button_template)
        self.register_helper("escape_string", lambda s: s.replace('"', '\\"'))
        self.add_import("import tkinter as tk")

    def register_python_helpers(self):
        """Register Python-specific helper functions."""
        self.register_helper("escape_string", lambda s: s.replace('"', '\\"'))

    def register_python_imports(self):
        """Register Python-specific imports."""
        self.add_import("import tkinter as tk")
        self.add_import("from tkinter import ttk")

    def register_python_components(self):
        """Register Python-specific component templates."""
        self.register_template("Window", self.window_template)
        self.register_template("Button", self.button_template)

    def register_template(self, component_type, template_func):
        """Register a template function for a component type."""
        self.template_registry[component_type] = template_func

    def register_helper(self, name, helper_func):
        """Register a helper function for templates."""
        self.helper_functions[name] = helper_func

    def add_import(self, import_statement):
        """Add an import statement to the generated code."""
        self.imports.add(import_statement)

    def generate(self, component, indent_level=0):
        """Generate code for a component and its children."""
        if component.type not in self.template_registry:
            raise ValueError(
                f"No template registered for component type: {component.type}"
            )

        # Create template context
        context = {
            "component": component,
            "helpers": self.helper_functions,
            "indent": " " * (4 * indent_level),
        }

        # Apply template
        template_func = self.template_registry[component.type]
        code_parts = []

        # Generate component code
        component_code = template_func(context)
        code_parts.append(component_code)

        # Generate child components
        for child in component.children:
            child_code = self.generate(child, indent_level + 1)
            code_parts.append(child_code)

        return "\n".join(code_parts)

    def generate_full_source(self, root_component):
        """Generate complete source code including imports."""
        component_code = self.generate(root_component)
        import_code = "\n".join(sorted(self.imports))

        return f"{import_code}\n\n{component_code}"

    # Window template
    def window_template(self, context):
        """Generate code for a Window component.

        The code generated by this template initializes a Tkinter window with
        the specified title and size.

        :param context: a dictionary with the following keys:
            - component: the component for which code is being generated
            - indent: the indentation level to use for the generated code
        :return: a string representing the generated code
        """
        component = context["component"]
        indent = context["indent"]

        title = component.properties.get("title", "Window")
        width = component.properties.get("width", 400)
        height = component.properties.get("height", 300)
        x = component.properties.get("x", 0)
        y = component.properties.get("y", 0)
        bg = component.properties.get("bg", "#d3d3d3")
        fg = component.properties.get("fg", "#000000")
        font = component.properties.get("font", "TkDefaultFont 12")

        self.add_import("import tkinter as tk")

        return f"""{indent}window = tk.Tk()
{indent}window.title("{title}")
{indent}window.geometry("{width}x{height}")"""

    # Button template
    def button_template(self, context):
        """Generate code for a Button component.

        The code generated by this template initializes a Tkinter button with
        the specified text and places it at the specified position.

        :param context: a dictionary with the following keys:
            - component: the component for which code is being generated
            - indent: the indentation level to use for the generated code
        :return: a string representing the generated code
        """
        component = context["component"]
        indent = context["indent"]

        text = component.properties.get("text", "Button")
        x = component.properties.get("x", 0)
        y = component.properties.get("y", 0)

        self.add_import("import tkinter as tk")
        self.add_import("from tkinter import ttk")

        return f"""{indent}button = tk.Button(window, text="{text}")
{indent}button.place(x={x}, y={y})"""

    # Register templates

    def register_templates(self):
        """Register all templates."""
        self.register_template("Window", self.window_template)
        self.register_template("Button", self.button_template)

    def register_helpers(self):
        """Register all helpers."""
        self.register_helper("escape_string", lambda s: s.replace('"', '\\"'))

    def register_imports(self):
        """Register all imports."""
        self.add_import("import tkinter as tk")

    def generate_code(self, component):
        """Generate code for a component."""
        return self.generate(component)

    def generate_code_from_model(self, component_model):
        """Generate code for a component model."""
        return self.generate(component_model)

    def generate_full_source_from_model(self, component_model):
        """Generate complete source code including imports from a component model."""
        component_code = self.generate_code_from_model(component_model)
        import_code = "\n".join(sorted(self.imports))

        return f"{import_code}\n\n{component_code}"
