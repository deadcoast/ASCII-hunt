"""Code Generator Module."""

from collections.abc import Callable
from typing import Any

from src.engine.modeling.component_model_representation import ComponentModel


class CodeGenerator:
    """Code Generator."""

    def __init__(self) -> None:
        """Initialize a CodeGenerator.

        The CodeGenerator has the following properties:
        - self.template_registry: a dictionary mapping component types to
          template functions for generating code
        - self.helper_functions: a dictionary mapping function names to
          template helper functions
        - self.imports: a set of strings representing the set of import
          statements required by the generated code
        - self.component_model: a ComponentModel instance
        """
        self.template_registry: dict[str, Callable] = {}
        self.helper_functions: dict[str, Callable] = {}
        self.imports: set[str] = set()
        self.component_model = ComponentModel()
        self.register_python_templates()
        self.register_python_helpers()
        self.register_python_imports()
        self.register_python_components()

    def register_python_templates(self) -> None:
        """Register Python-specific templates."""
        self.register_template("Window", self.window_template)
        self.register_template("Button", self.button_template)
        self.register_helper("escape_string", lambda s: s.replace('"', '\\"'))
        self.add_import("import tkinter as tk")

    def register_python_helpers(self) -> None:
        """Register Python-specific helper functions."""
        self.register_helper("escape_string", lambda s: s.replace('"', '\\"'))

    def register_python_imports(self) -> None:
        """Register Python-specific imports."""
        self.add_import("import tkinter as tk")
        self.add_import("from tkinter import ttk")

    def register_python_components(self) -> None:
        """Register Python-specific component templates."""
        self.register_template("Window", self.window_template)
        self.register_template("Button", self.button_template)

    def register_template(self, component_type: str, template_func: Callable) -> None:
        """Register a template function for a component type."""
        self.template_registry[component_type] = template_func

    def register_helper(self, name: str, helper_func: Callable) -> None:
        """Register a helper function for templates."""
        self.helper_functions[name] = helper_func

    def add_import(self, import_statement: str) -> None:
        """Add an import statement to the generated code."""
        self.imports.add(import_statement)

    def generate(self, component: dict[str, Any], indent_level: int = 0) -> str:
        """Generate code for a component and its children."""
        component_type = component.get("type")
        if not component_type or component_type not in self.template_registry:
            msg = f"No template registered for component type: {component_type}"
            raise ValueError(msg)

        # Create template context
        context = {
            "component": component,
            "helpers": self.helper_functions,
            "indent": " " * (4 * indent_level),
        }

        # Apply template
        template_func = self.template_registry[component_type]
        # Generate component code
        component_code = template_func(context)
        code_parts = [component_code]
        # Generate child components
        for child in component.get("children", []):
            if isinstance(child, dict):
                child_code = self.generate(child, indent_level + 1)
                code_parts.append(child_code)

        return "\n".join(code_parts)

    def generate_full_source(self, root_component: dict[str, Any]) -> str:
        """Generate complete source code including imports."""
        component_code = self.generate(root_component)
        import_code = "\n".join(sorted(self.imports))

        return f"{import_code}\n\n{component_code}"

    # Window template
    def window_template(self, context: dict[str, Any]) -> str:
        """Generate code for a Window component.

        The code generated by this template initializes a Tkinter window with
        the specified title and size.

        :param context: a dictionary with the following keys:
            - component: the component for which code is being generated
            - indent: the indentation level to use for the generated code
        :return: a string representing the generated code
        """
        component = context["component"]
        indent = context["indent"]

        title = component.get("title", "Window")
        width = component.get("width", 400)
        height = component.get("height", 300)
        component.get("x", 0)
        component.get("y", 0)
        component.get("bg", "#d3d3d3")
        component.get("fg", "#000000")
        component.get("font", "TkDefaultFont 12")

        self.add_import("import tkinter as tk")

        return f"""{indent}window = tk.Tk()
{indent}window.title("{title}")
{indent}window.geometry("{width}x{height}")"""

    # Button template
    def button_template(self, context: dict[str, Any]) -> str:
        """Generate code for a Button component.

        The code generated by this template initializes a Tkinter button with
        the specified text and places it at the specified position.

        :param context: a dictionary with the following keys:
            - component: the component for which code is being generated
            - indent: the indentation level to use for the generated code
        :return: a string representing the generated code
        """
        component = context["component"]
        indent = context["indent"]

        text = component.get("text", "Button")
        x = component.get("x", 0)
        y = component.get("y", 0)

        self.add_import("import tkinter as tk")
        self.add_import("from tkinter import ttk")

        return f"""{indent}button = tk.Button(window, text="{text}")
{indent}button.place(x={x}, y={y})"""

    # Register templates

    def register_templates(self) -> None:
        """Register all templates."""
        self.register_template("Window", self.window_template)
        self.register_template("Button", self.button_template)

    def register_helpers(self) -> None:
        """Register all helpers."""
        self.register_helper("escape_string", lambda s: s.replace('"', '\\"'))

    def register_imports(self) -> None:
        """Register all imports."""
        self.add_import("import tkinter as tk")

    def generate_code(self, component: dict[str, Any]) -> str:
        """Generate code for a component."""
        return self.generate(component)

    def generate_code_from_model(self, component_model: ComponentModel) -> str:
        """Generate code from a ComponentModel instance.

        Assumes the model has a root component accessible via an attribute or method.
        NOTE: This implementation assumes a `get_root_component` method exists.
        Adjust if the actual access method is different.

        Args:
            component_model: A ComponentModel instance.

        Returns:
            A string representing the generated code.

        Raises:
            ValueError: If the root component is not found.
            TypeError: If the root component is not a dictionary.
        """
        root_component = getattr(component_model, "root_component", None)
        if root_component is None:
            if all_components := component_model.get_all_components():
                root_component = all_components[0]
            else:
                msg = (
                    "ComponentModel does not contain a root component or any components"
                )
                raise ValueError(msg)
        if not isinstance(root_component, dict):
            msg = "Root component fetched from model is not a dictionary."
            raise TypeError(msg)

        return self.generate(root_component)

    def generate_full_source_from_model(self, component_model: ComponentModel) -> str:
        """Generate complete source code including imports from a component model."""
        component_code = self.generate_code_from_model(component_model)
        import_code = "\n".join(sorted(self.imports))

        return f"{import_code}\n\n{component_code}"
